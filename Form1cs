using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace Kursovaya
{
    public partial class Form1 : Form
    {
        SQLiteConnection SQLiteConn;
        DataTable dTable;
        
        public static double CF = 0.5;
        public static double tochnost = 0.0006;
        string SourceName;
        int LBItem;
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            SQLiteConn = new SQLiteConnection();
            dTable = new DataTable();
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            toolStripStatusLabel1.Text = "Откройте файл!";
        }

        private bool OpenDB()
        {
            OpenFileDialog OPF = new OpenFileDialog();
            OPF.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            OPF.Filter = "Текстовые файлы (*.sqlite)|*.sqlite|Все файлы (*.*)|*.*";
            if (OPF.ShowDialog(this) == DialogResult.OK)
            {
                SQLiteConn = new SQLiteConnection("DataSource=" + OPF.FileName + ";Version=3;");
                SQLiteConn.Open();
                SQLiteCommand command = new SQLiteCommand();
                command.Connection = SQLiteConn;
                pictureBox1.Load(OPF.FileName.Replace("sqlite", "png"));
                pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
                pictureBox2.Load(OPF.FileName.Replace("sqlite", "png"));
                pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
                return true;
            }
            else return false;
        }
        private string SQLTable()
        {
            return "SELECT * FROM [" + comboBox2.SelectedItem + "] order by 1";
        }
        private void GetTableNames()
        {
            string SQLQuery = "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;";
            SQLiteCommand command = new SQLiteCommand(SQLQuery, SQLiteConn);
            SQLiteDataReader reader = command.ExecuteReader();
            comboBox2.Items.Clear();
            while (reader.Read())
            {
                comboBox2.Items.Add(reader[0].ToString());
            }
        }
        public List<List<double>> Table1 = new List<List<double>>();
        public List<double> Table1Row = new List<double>();
        private void ShowTable(string SQLQuery)
        {
            dTable.Rows.Clear();
            dTable.Columns.Clear();
            dTable.Dispose();

            SQLiteDataAdapter adapter = new SQLiteDataAdapter(SQLQuery, SQLiteConn);
            adapter.Fill(dTable);

            dataGridView1.Rows.Clear();
            dataGridView1.Columns.Clear();
            Table1.Clear();
            Marks.Clear();
            for (int column = 0; column < dTable.Columns.Count; column++)
            {
                string ColName = dTable.Columns[column].ColumnName;
                dataGridView1.Columns.Add(ColName, ColName);
                dataGridView1.Columns[column].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            }

            for (int row = 0; row < dTable.Rows.Count; row++)
            {
                dataGridView1.Rows.Add(dTable.Rows[row].ItemArray);Table1Row = new List<double>();MarksRow = new List<int>();
                for (int column = 0; column < dataGridView1.Columns.Count; column++)
                {
                    Table1Row.Add(Convert.ToDouble(dataGridView1.Rows[row].Cells[column].Value));
                    MarksRow.Add(0);
                }
                Table1.Add(Table1Row);
                Marks.Add(MarksRow);
            }
        }
        List<List<int>> Marks = new List<List<int>>();
        List<int> MarksRow = new List<int>();
        private void BT_OpenDb(object sender, EventArgs e)
        {
            if (OpenDB() == true)
            {
                toolStripStatusLabel1.Text = "Выберите таблицу!";
                GetTableNames();
            }
            else return;
            
            button2.Visible = true;
            listBox1.Items.Clear();
            for (int items = 0; items < dataGridView1.Columns.Count - 1; items++)
                listBox1.Items.Add(items + 1);
            panel2.Visible = true;
            comboBox2.Visible = true;
            tabControl2.Enabled = true;
            tabControl3.Enabled = true;
        }
        private void BT_AddRow(object sender, EventArgs e)
        {
            if (comboBox2.SelectedIndex == -1)  return;
            dataGridView1.Rows.Add();
            DataRow dataRow = dTable.NewRow();
            Table1Row = new List<double>();
            Random randomValue = new Random();
            int lastAddedRow = dataGridView1.Rows.Count - 1;
            for (int column = 1; column < dataGridView1.Columns.Count; column++)
            {
                double newValue = Table1[0][column] + Math.Round(-1 * Среднее(column, Table1) + randomValue.NextDouble() * (Среднее(column, Table1) * 1 - Среднее(column, Table1) * -1), 4);
                dataRow[0] = lastAddedRow;
                dataRow[column] = newValue;
                dataGridView1.Rows[lastAddedRow].Cells[column].Value = newValue;
                dataGridView1.Rows[lastAddedRow].Cells[0].Value = lastAddedRow;
            }
            dTable.Rows.Add(dataRow);
            for (int column = 0; column < dataGridView1.Columns.Count; column++)
                Table1Row.Add(Convert.ToDouble(dataGridView1.Rows[lastAddedRow].Cells[column].Value));
            Table1.Add(Table1Row);
        }
        
        
        public List<List<double>> Table2 = new List<List<double>>();
        public List<double> Table2Row = new List<double>();
        public static double Среднее(int column, List<List<double>> array)
        {
            double sum = 0;
            int row = 0;
            for (; row < array.Count - 2; row++)
            {
                sum += Math.Abs(array[0][column] - array[row][column]);
            }
            return Math.Round(sum / row, 4);
        }
        public static double MU(int rowIndex, List<List<double>> array)
        {
            double sum = 0;
            for (int column = 1; column < array[rowIndex].Count; column++)
            {
                sum += Math.Pow(array[rowIndex][column], 2);
            }
            return Math.Sqrt(sum);
        }
        public static double Альфа(int rowIndex, List<List<double>> primalArray, List<List<double>> newArray)
        {
            double numerator = 0;
            double divider;

            for (int column = 1; column < primalArray[rowIndex].Count; column++)
                numerator += primalArray[0][column] * primalArray[rowIndex][column];

            divider = newArray[0][1] * newArray[rowIndex][1];

            if (numerator / divider > 1)
                numerator = divider;
            if ((numerator / divider) > 1 - 1e-12 && (numerator / divider) != 1)
                return 0;
            return (180 / Math.PI) * Math.Acos(numerator / divider);
        }
        public static double ПервыйПрогноз(int column, List<List<double>> array)
        {
            double sum = 0;
            int i = 0;
            for (; i < array.Count; i++)
            {
                sum += array[i][column];
            }
            return Form1.CF * array[0][column] + (1 - Form1.CF) * (sum / i);
        }
        
        private void BT_Dec2(object sender, EventArgs e)
        {
            if (comboBox2.SelectedIndex == -1) return;

            dataGridView2.Rows.Clear();           
            Table2.Clear();
            chart1.Series["График фазовых координат"].Points.Clear();
            chart1.Series["График прогнозов"].Points.Clear();
            chart1.Series["График нижней границы"].Points.Clear();
            chart1.Series["График верхней границы"].Points.Clear();
            for (int row = 0; row < dataGridView1.Rows.Count; row++)
            {
                dataGridView2.Rows.Add();
                Table2Row = new List<double>();
                for (int column = 0; column < dataGridView2.Columns.Count + 2; column++)
                    Table2Row.Add(0);
                Table2.Add(Table2Row);
                Table2[row][0] = Table1[row][0];
                Table2[row][1] = MU(row, Table1);
                Table2[row][2] = Альфа(row, Table1, Table2);
                Table2[row][5] = ЛевоеМ(row, Table1);
                Table2[row][6] = ПравоеМ(row, Table1);
                Table2[row][7] = ЛевоеАльфа(row, Table1, Table2);
                Table2[row][8] = ПравоеАльфа(row, Table1, Table2);
                Table2[row][9] = Math.Round(Math.Abs(Table2[row][6] - Table2[row][5]), 4) / 2;
                Table2[row][10] = Math.Round(Math.Abs(Table2[0][1] - Table2[row][1]), 4);

                dataGridView2.Rows[row].Cells[0].Value = Table2[row][0];
                dataGridView2.Rows[row].Cells[1].Value = Math.Round(Table2[row][1], 4);
                dataGridView2.Rows[row].Cells[2].Value = Math.Round(3600 * Table2[row][2], 2);
                dataGridView2.Rows[row].Cells[5].Value = Math.Round(Table2[row][5], 4);
                dataGridView2.Rows[row].Cells[6].Value = Math.Round(Table2[row][6], 4);
                dataGridView2.Rows[row].Cells[7].Value = Math.Round(3600 * Table2[row][7], 2);
                dataGridView2.Rows[row].Cells[8].Value = Math.Round(3600 * Table2[row][8], 2);
                dataGridView2.Rows[row].Cells[9].Value = Table2[row][9];
                dataGridView2.Rows[row].Cells[10].Value = Table2[row][10];
                dataGridView2.Rows[row].Cells[11].Value = Стабильность(row, Table2);

                if (dataGridView2.Rows[row].Cells[11].Value.ToString() == "неустойчиво")
                    dataGridView2.Rows[row].DefaultCellStyle.BackColor = Color.FromArgb(255, 255, 90, 90);

                chart1.Series["График фазовых координат"].Points.AddXY(Table2[row][1], Table2[row][2]);
                chart1.Series["График нижней границы"].Points.AddXY(Table2[row][5], Table2[row][7]);
                chart1.Series["График верхней границы"].Points.AddXY(Table2[row][6], Table2[row][8]);
                chart1.Series["График фазовых координат"].Points[row].Label = row.ToString();
                chart1.Series["График верхней границы"].Points[row].Label = row.ToString();
                chart1.Series["График нижней границы"].Points[row].Label = row.ToString();
            }
            Table2[0][3] = ПервыйПрогноз(1, Table2);
            Table2[0][4] = ПервыйПрогноз(2, Table2);
            Table2[0][11] = ПервыйПрогноз(5, Table2);
            Table2[0][12] = ПервыйПрогноз(6, Table2);
            dataGridView2.Rows[0].Cells[3].Value = Math.Round(Table2[0][3], 4);

            chart1.Series["График прогнозов"].Points.AddXY(Table2[0][3], Table2[0][4]);
            chart1.Series["График прогнозов"].Points[0].Label = "0";

            for (int row = 1; row < dataGridView1.Rows.Count; row++)
            {
                Table2[row][3] = Прогноз(row, 1, 3, Table2);
                Table2[row][4] = Прогноз(row, 2, 4, Table2);
                Table2[row][11] = Прогноз(row, 5, 11, Table2);
                Table2[row][12] = Прогноз(row, 6, 12, Table2);
                dataGridView2.Rows[row].Cells[3].Value = Math.Round(Table2[row][3], 4);
                dataGridView2.Rows[row].Cells[4].Value = Math.Round(3600 * Table2[row][4], 6);

                chart1.Series["График прогнозов"].Points.AddXY(Table2[row][3], Table2[row][4]);
                chart1.Series["График прогнозов"].Points[row].Label = row.ToString();
            }
            dataGridView2.Rows.Add();
            Table2Row = new List<double>();
            for (int column = 0; column < dataGridView2.Columns.Count + 1; column++)
                Table2Row.Add(0);
            Table2.Add(Table2Row);

            int rowIndex = dataGridView2.RowCount - 1;
            dataGridView2.Rows[rowIndex].Cells[0].Value = "Прогноз";

            Table2[rowIndex][3] = ПоследнийПрогноз(1, 3, Table2);
            Table2[rowIndex][4] = ПоследнийПрогноз(2, 4, Table2);
            Table2[rowIndex][11] = ПоследнийПрогноз(5, 11, Table2);
            Table2[rowIndex][12] = ПоследнийПрогноз(6, 12, Table2);
            dataGridView2.Rows[rowIndex].Cells[3].Value = Math.Round(Table2[rowIndex][3], 4);
            dataGridView2.Rows[rowIndex].Cells[4].Value = Math.Round(3600 * Table2[rowIndex][4], 2);
            dataGridView2.Rows[rowIndex].Cells[5].Value = Math.Round(Table2[rowIndex][11], 4);
            dataGridView2.Rows[rowIndex].Cells[6].Value = Math.Round(Table2[rowIndex][12], 4);

            Table2[rowIndex][9] = Math.Round(Math.Abs(Table2[rowIndex][11] - Table2[rowIndex][12]), 4) / 2;
            Table2[rowIndex][10] = Math.Round(Math.Abs(Table2[0][1] - Table2[rowIndex][3]), 4);
            dataGridView2.Rows[rowIndex].Cells[9].Value = Table2[rowIndex][9];
            dataGridView2.Rows[rowIndex].Cells[10].Value = Table2[rowIndex][10];
            dataGridView2.Rows[rowIndex].Cells[11].Value = Стабильность(rowIndex, Table2);

            dataGridView2.Rows[rowIndex].DefaultCellStyle.BackColor = Color.GreenYellow;

            for (int row = 0; row < Table2.Count; row++)
                if (dataGridView2.Rows[row].Cells[11].Value.ToString() == "неустойчиво")
                    dataGridView2.Rows[row].DefaultCellStyle.BackColor = Color.Red;

            dataGridView2.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Chocolate;

            if (dataGridView2.Rows[rowIndex].Cells[11].Value.ToString() == "неустойчиво")
                dataGridView2.Rows[rowIndex].Cells[11].Style.BackColor = Color.Red;

            chart1.Series["График прогнозов"].Points.AddXY(Table2[rowIndex][3], Table2[rowIndex][4]);
            chart1.Series["График нижней границы"].Points.AddXY(Table2[rowIndex][11], Table2[rowIndex][4]);
            chart1.Series["График верхней границы"].Points.AddXY(Table2[rowIndex][12], Table2[rowIndex][4]);
            chart1.Series["График прогнозов"].Points[rowIndex].Label = rowIndex.ToString();
            chart1.Series["График верхней границы"].Points[rowIndex].Label = rowIndex.ToString();
            chart1.Series["График нижней границы"].Points[rowIndex].Label = rowIndex.ToString();
            chart1.Series["График нижней границы"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart1.Series["График нижней границы"].Points[rowIndex].Color = Color.Red;
            chart1.Series["График нижней границы"].Points[rowIndex].MarkerSize = 20;
            chart1.Series["График нижней границы"].Points[rowIndex].MarkerColor = Color.Red;
            chart1.Series["График верхней границы"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart1.Series["График верхней границы"].Points[rowIndex].Color = Color.Red;
            chart1.Series["График верхней границы"].Points[rowIndex].MarkerSize = 20;
            chart1.Series["График верхней границы"].Points[rowIndex].MarkerColor = Color.Red;
            chart1.Series["График прогнозов"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart1.Series["График прогнозов"].Points[rowIndex].Color = Color.Red;
            chart1.Series["График прогнозов"].Points[rowIndex].MarkerSize = 20;
            chart1.Series["График прогнозов"].Points[rowIndex].MarkerColor = Color.Red;

            //График марок
            //chart3.Series.Clear();
            //checkedListBox1.Items.Clear();
            //double min = Table1[0][1];
            //for (int column = 1; column < Table1[0].Count; column++)
            //{
            //    if (Convert.ToDouble(Table1[0][column]) < min)
            //    {
            //        chart3.ChartAreas[0].AxisY.Minimum = (Table1[0][column] - 0.01);
            //        min = Table1[0][column];
            //    }
            //}
            //for (int column = 1; column < Table1[0].Count; column++)
            //{
            //    chart3.Series.Add("Марка " + column);
            //    chart3.Series["Марка " + column].BorderWidth = 3;
            //    chart3.Series["Марка " + column].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
            //    for (int row = 0; row < Table1.Count; row++)
            //    {
            //        chart3.Series["Марка " + column].Points.AddXY(Table1[row][0], Table1[row][column]);
            //    }
            //    checkedListBox1.Items.Add("Марка " + column);
            //    checkedListBox1.SetItemChecked(column - 1, true);
            //}
        }
        private void BT_CFT(object sender, EventArgs e)
        {
            try
            {
                tochnost = Convert.ToDouble(textBox2.Text.Replace('.', ','));
                CF = Convert.ToDouble(textBox1.Text.Replace('.', ','));
            }
            catch (System.FormatException)
            {
                textBox2.Clear();
            }
            if (CF < 0 || CF > 1)
            {
                textBox1.Focus();
                textBox1.Clear();
                textBox1.Select(0, textBox1.Text.Length);
                toolStripStatusLabel1.Visible = true;
                toolStripStatusLabel1.Text = "Диапозон сглаживания от 0 до 1";
                CF = 0.6;
                textBox1.Text = Convert.ToString(0.6);
                statusStrip1.BackColor = Color.Red;
                statusStrip1.BackColor = Color.Red;
                return;
            }
            else
            {
                toolStripStatusLabel1.Text = "";
                statusStrip1.BackColor = Color.Green;
            }
        }
        private void ОтображениеГрафиков(object sender, EventArgs e)
        {
            if (checkBox1.Checked == false)
                chart1.Series["График фазовых координат"].Enabled = false;
            else chart1.Series["График фазовых координат"].Enabled = true;
            if (checkBox2.Checked == false)
                chart1.Series["График прогнозов"].Enabled = false;
            else chart1.Series["График прогнозов"].Enabled = true;
            if (checkBox4.Checked == false)
                chart1.Series["График нижней границы"].Enabled = false;
            else chart1.Series["График нижней границы"].Enabled = true;
            if (checkBox3.Checked == false)
                chart1.Series["График верхней границы"].Enabled = false;
            else chart1.Series["График верхней границы"].Enabled = true;
            if (checkBox5.Checked == false)
                chart2.Series["График фазовых координат"].Enabled = false;
            else chart2.Series["График фазовых координат"].Enabled = true;
            if (checkBox6.Checked == false)
                chart2.Series["График прогнозов"].Enabled = false;
            else chart2.Series["График прогнозов"].Enabled = true;
            if (checkBox8.Checked == false)
                chart2.Series["График нижней границы"].Enabled = false;
            else chart2.Series["График нижней границы"].Enabled = true;
            if (checkBox7.Checked == false)
                chart2.Series["График верхней границы"].Enabled = false;
            else chart2.Series["График верхней границы"].Enabled = true;
            //if (checkBox9.Checked == false)
            //    chart4.Series["График фазовых координат 1"].Enabled = false;
            //else chart4.Series["График фазовых координат 1"].Enabled = true;
            //if (checkBox10.Checked == false)
            //    chart4.Series["График фазовых координат 2"].Enabled = false;
            //else chart4.Series["График фазовых координат 2"].Enabled = true;
        }
        private void ОтображениеГрафиков2(object sender, EventArgs e)
        {
            //if (checkBox9.Checked == false)
            //    chart4.Series["График фазовых координат 1"].Enabled = false;
            //else chart4.Series["График фазовых координат 1"].Enabled = true;
            //if (checkBox10.Checked == false)
            //    chart4.Series["График фазовых координат 2"].Enabled = false;
            //else chart4.Series["График фазовых координат 2"].Enabled = true;

            if (checkBox9.Checked == false)
            {
                chart4.Series["График фазовых координат 1"].Points.Clear();
            }
            else
            {
                chart4.Series["График фазовых координат 1"].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                for (int i = 0; i < Tables[0].Count - 1; i++)
                {
                    chart4.Series["График фазовых координат 1"].Points.AddXY(Tables[0][i][1], Tables[0][i][2]);
                    chart4.Series["График фазовых координат 1"].Points[i].Label = i.ToString();
                }
                chart4.Series["График фазовых координат 1"].BorderWidth = 2;
                chart4.Series["График фазовых координат 1"].Color = Color.DodgerBlue;
                chart4.Series["График фазовых координат 1"].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Circle;
                chart4.Series["График фазовых координат 1"].MarkerSize = 10;
            }
        }
        private void ОтображениеГрафиков3(object sender, EventArgs e)
        {
            if (checkBox11.Checked == false)
                chart4.Series["График фазовых координат 3"].Enabled = false;
            else chart4.Series["График фазовых координат 3"].Enabled = true;
        }
        private void LB_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                int itemIndex = (sender as ListBox).SelectedIndex;

                if (itemIndex != -1)
                {
                    SourceName = (sender as ListBox).Name;
                    LBItem = itemIndex;
                    string text = (sender as ListBox).Items[itemIndex].ToString();

                    if (text != "")
                    {
                        (sender as ListBox).DoDragDrop(text, DragDropEffects.Move);
                    }
                }
            }
        }
        private void LB_DragDrop(object sender, DragEventArgs e)
        {
            if ((sender as Control).Name == SourceName)
                return;

            if (comboBox1.SelectedIndex < 0)
            {
                MessageBox.Show("Укажите блок, в который хотите занести марки",
                    "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if ((tabPage6.Controls[SourceName] as ListBox) == listBox1)
                if (listBox2.Items.Count > marksUpDown1.Value - 1)
                    return;

            string value = e.Data.GetData(DataFormats.Text).ToString();

            Point cursorPosition = (sender as ListBox).PointToClient(new Point(e.X, e.Y));
            int itemIndex = (sender as ListBox).IndexFromPoint(cursorPosition);

            if (itemIndex == -1)
                (sender as ListBox).Items.Add(value);
            else
                (sender as ListBox).Items.Insert(itemIndex, value);

            if (LBItem >= 0)
                (tabPage6.Controls[SourceName] as ListBox).Items.RemoveAt(LBItem);


        }
        private void LB_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.Text))
                e.Effect = DragDropEffects.Move;
            else
                e.Effect = DragDropEffects.None;
        }
        private void tabControl1_Selected(object sender, TabControlEventArgs e)
        {
            if (tabControl1.SelectedIndex == 2)
            {
                bloksUpDown1.Maximum = (dataGridView1.Columns.Count - 1) / 2;
                marksUpDown1.Maximum = (dataGridView1.Columns.Count - 1) / 2;

                if (comboBox1.SelectedIndex < 0)
                {
                    button3.Enabled = false;
                    listBox1.Enabled = false;
                    listBox2.Enabled = false;
                }
            }
        }
        bool AreMarksAdded = false;
        public static double Прогноз(int rowIndex, int primalColumn, int predictionColumn, List<List<double>> array)
        {
            return Form1.CF * array[rowIndex][primalColumn] + (1 - Form1.CF) * array[rowIndex - 1][predictionColumn];
        }
        public static double ПоследнийПрогноз(int primalColumn, int predictionColumn, List<List<double>> array)
        {
            double sum = 0;
            int i = 0;
            for (; i < array.Count - 1; i++)
            {
                sum += array[i][primalColumn];
            }
            return Form1.CF * (sum / i) + (1 - Form1.CF) * array[i - 1][predictionColumn];
        }
        public static double ЛевоеМ(int rowIndex, List<List<double>> array)
        {
            double sum = 0;
            for (int column = 1; column < array[rowIndex].Count; column++)
            {
                sum += Math.Pow(array[rowIndex][column] - Form1.tochnost, 2);
            }
            return Math.Sqrt(sum);
        }
        public static double ПравоеМ(int rowIndex, List<List<double>> array)
        {
            double sum = 0;
            for (int column = 1; column < array[rowIndex].Count; column++)
            {
                sum += Math.Pow(array[rowIndex][column] + Form1.tochnost, 2);
            }
            return Math.Sqrt(sum);
        }
        public static double ЛевоеАльфа(int rowIndex, List<List<double>> primalArray, List<List<double>> newArray)
        {
            double numerator = 0;
            double divider;

            for (int column = 1; column < primalArray[rowIndex].Count; column++)
                numerator += (primalArray[0][column] - Form1.tochnost) * (primalArray[rowIndex][column] - Form1.tochnost);

            divider = newArray[0][5] * newArray[rowIndex][5];

            if (numerator / divider > 1)
                numerator = divider;
            if ((numerator / divider) > 1 - 1e-12 && (numerator / divider) != 1)
                return 0;
            return (180 / Math.PI) * Math.Acos(numerator / divider);
        }
        public static double ПравоеАльфа(int rowIndex, List<List<double>> primalArray, List<List<double>> newArray)
        {
            double numerator = 0;
            double divider;

            for (int column = 1; column < primalArray[rowIndex].Count; column++)
                numerator += (primalArray[0][column] + Form1.tochnost) * (primalArray[rowIndex][column] + Form1.tochnost);

            divider = newArray[0][6] * newArray[rowIndex][6];

            if (numerator / divider > 1)
                numerator = divider;
            if ((numerator / divider) > 1 - 1e-12 && (numerator / divider) != 1)
                return 0;
            return (180 / Math.PI) * Math.Acos(numerator / divider);
        }
        public static string Стабильность(int row, List<List<double>> newArray)
        {
            if (newArray[row][9] >= newArray[row][10])
                return "устойчиво";
            else return "неустойчиво";
        }
        private void UpDown_Value(object sender, EventArgs e)
        {
            decimal a;
            if (bloksUpDown1.Value != 0)
                marksUpDown1.Maximum = (dataGridView1.Columns.Count - 1) / (int)bloksUpDown1.Value;
            a = marksUpDown1.Maximum;
            marksUpDown1.Value = a;
        }
        private void UpDown_Leave(object sender, EventArgs e)
        {
            comboBox1.Items.Clear();
            char blockName = '\u0410';
            for (int items = 0; items < bloksUpDown1.Value; items++)
            {
                comboBox1.Items.Add(blockName);
                
                blockName++;
            }
            for (int i = 0; i < bloksUpDown1.Value; i++)
                Tables.Add(Table4);
        }
        int ComboBoxSelectedIndex = -1;
        private void blocksComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            button3.Enabled = true;
            listBox1.Enabled = true;
            listBox2.Enabled = true;


            if (!AreMarksAdded && ComboBoxSelectedIndex == -1)
            {
                ComboBoxSelectedIndex = comboBox1.SelectedIndex;
                return;
            }
            //Добавление марок в блок
            if (comboBox1.SelectedIndex < 0)
                return;
            for (int item = 0; item < listBox2.Items.Count; item++)
                Marks[ComboBoxSelectedIndex][item] = Convert.ToInt32(listBox2.Items[item]);
            AreMarksAdded = true;
            //
            listBox2.Items.Clear();
            for (int i = 0; i < Marks[comboBox1.SelectedIndex].Count; i++)
            {
                if (Marks[comboBox1.SelectedIndex][i] != 0)
                    listBox2.Items.Add(Marks[comboBox1.SelectedIndex][i]);
            }
            
            AreMarksAdded = false;
            ComboBoxSelectedIndex = comboBox1.SelectedIndex;
            
        }
        public List<List<double>> Table3 = new List<List<double>>();
        public List<double> ThirdTableRow = new List<double>();
        private void BT_Dec2Table(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex < 0)
                return;
            for (int item = 0; item < listBox2.Items.Count; item++)
                Marks[ComboBoxSelectedIndex][item] = Convert.ToInt32(listBox2.Items[item]);
            AreMarksAdded = true;
            //сверху добавление марок в блок 
            dataGridView3.Rows.Clear();
            dataGridView3.Columns.Clear();
            Table3.Clear();
            button5.Enabled = true;
            groupBox5.Enabled = true;

            for (int column = 0; column < marksUpDown1.Value; column++)
            {
                if (Marks[comboBox1.SelectedIndex][column] == 0)
                {
                    MessageBox.Show("Марок для добавления: " +
                        (marksUpDown1.Value - column), "Добавьте марки в блок", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            dataGridView3.Columns.Add("Эпоха", "Эпоха");
            for (int column = 1; column <= marksUpDown1.Value; column++)
                dataGridView3.Columns.Add("", Marks[comboBox1.SelectedIndex][column - 1].ToString());
            for (int row = 0; row < dataGridView1.Rows.Count; row++)
            {
                dataGridView3.Rows.Add();
                ThirdTableRow = new List<double>();
                for (int column = 0; column < dataGridView3.Columns.Count; column++)
                    ThirdTableRow.Add(0);
                Table3.Add(ThirdTableRow);
                Table3[row][0] = row;
                dataGridView3.Rows[row].Cells[0].Value = Table3[row][0];
                for (int column = 1; column <= marksUpDown1.Value; column++)
                {
                    Table3[row][column] = Table1[row][Marks[comboBox1.SelectedIndex][column - 1]];
                    dataGridView3.Rows[row].Cells[column].Value = Table3[row][column];
                }
            }
        }
        DataTable dataTable4 = new DataTable();
        public List<List<List<double>>> Tables = new List<List<List<double>>>();
        public List<List<double>> Table4 = new List<List<double>>();
        public List<double> Table4Row = new List<double>();
        
        private void Table4_Click(object sender, EventArgs e)
        {
            dataTable4.Rows.Clear();
            dataTable4.Columns.Clear();
            dataTable4.Dispose();
            Table4.Clear();
            chart2.Series["График фазовых координат"].Points.Clear();
            chart2.Series["График нижней границы"].Points.Clear();
            chart2.Series["График верхней границы"].Points.Clear();
            chart2.Series["График прогнозов"].Points.Clear();
            //chart3.Series["График фазовых координат"].Points.Clear();
          
            dataTable4.Columns.Add("Эпоха");
            dataTable4.Columns.Add("M");
            dataTable4.Columns.Add("α (в секундах)");
            dataTable4.Columns.Add("M прогнозное");
            dataTable4.Columns.Add("α прогнозное");
            dataTable4.Columns.Add("M-");
            dataTable4.Columns.Add("M+");
            dataTable4.Columns.Add("α- (в секундах)");
            dataTable4.Columns.Add("α+ (в секундах)");
            dataTable4.Columns.Add("L");
            dataTable4.Columns.Add("D");
            dataTable4.Columns.Add("Устойчивость");
            dataGridView4.DataSource = dataTable4;

            for (int row = 0; row < Table1.Count; row++)
            {
                Table4Row = new List<double>();
                for (int column = 0; column < Table2[0].Count; column++)
                    Table4Row.Add(0);
                Table4.Add(Table4Row);
                DataRow dataTable4Row = dataTable4.NewRow();
                Table4[row][0] = row;
                Table4[row][1] = MU(row, Table3);
                Table4[row][2] = Альфа(row, Table3, Table4);
                Table4[row][5] = ЛевоеМ(row, Table3);
                Table4[row][6] = ПравоеМ(row, Table3);
                Table4[row][7] = ЛевоеАльфа(row, Table3, Table4);
                Table4[row][8] = ПравоеАльфа(row, Table3, Table4);
                Table4[row][9] = Math.Round(Math.Abs(Table4[row][6] - Table4[row][5]), 4) / 2;
                Table4[row][10] = Math.Round(Math.Abs(Table4[0][1] - Table4[row][1]), 4);

                dataTable4Row[0] = Table4[row][0];
                dataTable4Row[1] = Math.Round(Table4[row][1], 4);
                dataTable4Row[2] = Math.Round(3600 * Table4[row][2], 2);
                dataTable4Row[5] = Math.Round(Table4[row][5], 4);
                dataTable4Row[6] = Math.Round(Table4[row][6], 4);
                dataTable4Row[7] = Math.Round(3600 * Table4[row][7], 6);
                dataTable4Row[8] = Math.Round(3600 * Table4[row][8], 6);
                dataTable4Row[9] = Table4[row][9];
                dataTable4Row[10] = Table4[row][10];
                dataTable4Row[11] = Стабильность(row, Table4);
                dataTable4.Rows.Add(dataTable4Row);
                
                chart2.Series["График фазовых координат"].Points.AddXY(Table4[row][1], Table4[row][2]);
                chart2.Series["График нижней границы"].Points.AddXY(Table4[row][5], Table4[row][7]);
                chart2.Series["График верхней границы"].Points.AddXY(Table4[row][6], Table4[row][8]);
                chart2.Series["График фазовых координат"].Points[row].Label = row.ToString();
                chart2.Series["График верхней границы"].Points[row].Label = row.ToString();
                chart2.Series["График нижней границы"].Points[row].Label = row.ToString();
                //chart3.Series["График фазовых координат"].Points.AddXY(Table4[row][1], Table4[row][2]);
                //chart3.Series["График фазовых координат"].Points[row].Label = row.ToString();


                if (row == Table1.Count - 1)
                {
                    dataTable4Row = dataTable4.NewRow();
                    dataTable4.Rows.Add(dataTable4Row);
                }
            }

            Table4[0][3] = ПервыйПрогноз(1, Table4);
            Table4[0][4] = ПервыйПрогноз(2, Table4);
            Table4[0][11] = ПервыйПрогноз(5, Table4);
            Table4[0][12] = ПервыйПрогноз(6, Table4);
            chart2.Series["График прогнозов"].Points.AddXY(Table4[0][3], Table4[0][4]);
            chart2.Series["График прогнозов"].Points[0].Label = "0";

            dataTable4.Rows[0][3] = Math.Round(Table4[0][3], 4);
            dataTable4.Rows[0][4] = Math.Round(3600 * Table4[0][4], 6);
            for (int row = 1; row < Table1.Count; row++)
            {
                Table4[row][3] = Прогноз(row, 1, 3, Table4);
                Table4[row][4] = Прогноз(row, 2, 4, Table4);
                Table4[row][11] = Прогноз(row, 5, 11, Table4);
                Table4[row][12] = Прогноз(row, 6, 12, Table4);
                chart2.Series["График прогнозов"].Points.AddXY(Table4[row][3], Table4[row][4]);
                chart2.Series["График прогнозов"].Points[row].Label = row.ToString();
                dataTable4.Rows[row][3] = Math.Round(Table4[row][3], 4);
                dataTable4.Rows[row][4] = Math.Round(3600 * Table4[row][4], 6);
                
            }
            Table4Row = new List<double>();
            for (int column = 0; column < Table2[0].Count + 1; column++)
                Table4Row.Add(0);
            Table4.Add(Table4Row);
            int rowIndex = Table4.Count - 1;

            dataTable4.Rows[rowIndex][0] = "Прогноз";
            Table4[rowIndex][3] = ПоследнийПрогноз(1, 3, Table4);
            Table4[rowIndex][4] = ПоследнийПрогноз(2, 4, Table4);
            Table4[rowIndex][11] = ПоследнийПрогноз(5, 11, Table4);
            Table4[rowIndex][12] = ПоследнийПрогноз(6, 12, Table4);
            dataTable4.Rows[rowIndex][3] = Math.Round(Table4[rowIndex][3], 4);
            dataTable4.Rows[rowIndex][4] = Math.Round(3600 * Table4[rowIndex][4], 6);
            dataTable4.Rows[rowIndex][5] = Math.Round(Table4[rowIndex][11], 4);
            dataTable4.Rows[rowIndex][6] = Math.Round(Table4[rowIndex][12], 4);
            Table4[rowIndex][9] = Math.Round(Math.Abs(Table4[rowIndex][11] - Table4[rowIndex][12]), 4) / 2;
            Table4[rowIndex][10] = Math.Round(Math.Abs(Table4[0][1] - Table4[rowIndex][3]), 4);
            dataTable4.Rows[rowIndex][9] = Table4[rowIndex][9];
            dataTable4.Rows[rowIndex][10] = Table4[rowIndex][10];
            dataTable4.Rows[rowIndex][11] = Стабильность(rowIndex, Table4);
            for (int row = 0; row < dataTable4.Rows.Count; row++)
                if (dataTable4.Rows[row][11].ToString() == "неустойчиво")
                    dataGridView4.Rows[row].DefaultCellStyle.BackColor = Color.Red;
            dataGridView4.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Aqua;
            if (dataTable4.Rows[rowIndex][11].ToString() == "неустойчиво")
                dataGridView4.Rows[rowIndex].Cells[11].Style.BackColor = Color.Red;
            List<List<double>> FourthTableCopy;
            FourthTableCopy = Table4.ToList();
            Tables[comboBox1.SelectedIndex] = FourthTableCopy;
            chart2.Series["График прогнозов"].Points.AddXY(Table4[rowIndex][3], Table4[rowIndex][4]);
            chart2.Series["График нижней границы"].Points.AddXY(Table4[rowIndex][11], Table4[rowIndex][4]);
            chart2.Series["График верхней границы"].Points.AddXY(Table4[rowIndex][12], Table4[rowIndex][4]);
            chart2.Series["График прогнозов"].Points[rowIndex].Label = rowIndex.ToString();
            chart2.Series["График верхней границы"].Points[rowIndex].Label = rowIndex.ToString();
            chart2.Series["График нижней границы"].Points[rowIndex].Label = rowIndex.ToString();
            chart2.Series["График нижней границы"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart2.Series["График нижней границы"].Points[rowIndex].Color = Color.Red;
            chart2.Series["График нижней границы"].Points[rowIndex].MarkerSize = 20;
            chart2.Series["График нижней границы"].Points[rowIndex].MarkerColor = Color.Red;
            chart2.Series["График верхней границы"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart2.Series["График верхней границы"].Points[rowIndex].Color = Color.Red;
            chart2.Series["График верхней границы"].Points[rowIndex].MarkerSize = 20;
            chart2.Series["График верхней границы"].Points[rowIndex].MarkerColor = Color.Red;
            chart2.Series["График прогнозов"].Points[rowIndex].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10;
            chart2.Series["График прогнозов"].Points[rowIndex].Color = Color.Red;
            chart2.Series["График прогнозов"].Points[rowIndex].MarkerSize = 20;
            chart2.Series["График прогнозов"].Points[rowIndex].MarkerColor = Color.Red;
        }
        public void ГрафикиБлоков(List<List<List<double>>> graphSource, int chartsCount)
        {           
            for (int charts = 0; charts < chartsCount; charts++)
            {

                chart4.Series.Add("График фазовых координат " + (charts + 1));

                chart4.Series["График фазовых координат " + (charts + 1)].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                int rowIndex = graphSource[0].Count - 1;
                for (int i = 0; i < graphSource[0].Count - 1; i++)
                {
                    chart4.Series["График фазовых координат " + (charts + 1)].Points.AddXY(graphSource[charts][i][1], graphSource[charts][i][2]);                   
                    chart4.Series["График фазовых координат " + (charts + 1)].Points[i].Label = i.ToString();                   
                }
                chart4.Series["График фазовых координат " + (charts + 1)].BorderWidth = 2;
                chart4.Series["График фазовых координат " + (charts + 1)].Color = Color.DodgerBlue;
                chart4.Series["График фазовых координат " + (charts + 1)].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Circle;
                chart4.Series["График фазовых координат " + (charts + 1)].MarkerSize = 10;
            }
            Show();
        }
        
        private void combobox(object sender, EventArgs e)
        {
            
            
        }
        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (checkedListBox1.GetItemChecked(checkedListBox1.SelectedIndex))
            {
                chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].Enabled = true;
                chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].BorderWidth = 3;
                chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                for (int row = 0; row < Table1.Count; row++)
                {
                    chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].Points.AddXY(Table1[row][0], Table1[row][checkedListBox1.SelectedIndex + 1]);
                }

                double min = chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].Points[0].YValues[0];
                for (int chart = 1; chart <= checkedListBox1.Items.Count; chart++)
                {
                    for (int point = 0; point < Table1.Count; point++)
                    {
                        if (chart3.Series["Марка " + chart].Enabled && (chart3.Series["Марка " + chart].Points[point].YValues[0]) < min)
                        {
                            chart3.ChartAreas[0].AxisY.Minimum = (chart3.Series["Марка " + chart].Points[point].YValues[0] - 0.01);
                            min = chart3.Series["Марка " + chart].Points[point].YValues[0];
                        }
                    }
                }
            }
            else
            {
                chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].Points.Clear();
                chart3.Series["Марка " + (checkedListBox1.SelectedIndex + 1)].Enabled = false;
            }
        }
        private void OffMarks_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < checkedListBox1.Items.Count; i++)
            {
                checkedListBox1.SetItemChecked(i, false);
                chart3.Series["Марка " + (i + 1)].Points.Clear();
                chart3.Series["Марка " + (i + 1)].Enabled = false;
            }
        }
        private void comboBox2_change(object sender, EventArgs e)
        {
            ShowTable(SQLTable());
            listBox1.Items.Clear();
            listBox2.Items.Clear();
            for (int items = 0; items < dataGridView1.Columns.Count - 1; items++)
                listBox1.Items.Add(items + 1);
        }

        private void chart4_Click(object sender, EventArgs e)
        {
            int maks;
            chart4.Series.Clear();
            checkBox9.Visible = true;
            checkBox10.Visible = true;
            //chart4.Series[0].Color = Color.Red;
            maks = Convert.ToInt32(bloksUpDown1.Value);
            if (maks == 3) checkBox11.Visible = true;

            ГрафикиБлоков(Tables, (int)bloksUpDown1.Value);
        }

        private void button7_Click(object sender, EventArgs e)
        {
            chart3.Series.Clear();
            checkedListBox1.Items.Clear();
            double min = Table1[0][1];
            for (int column = 1; column < Table1[0].Count; column++)
            {
                if (Convert.ToDouble(Table1[0][column]) < min)
                {
                    chart3.ChartAreas[0].AxisY.Minimum = (Table1[0][column] - 0.01);
                    min = Table1[0][column];
                }
            }
            for (int column = 1; column < Table1[0].Count; column++)
            {
                chart3.Series.Add("Марка " + column);
                chart3.Series["Марка " + column].BorderWidth = 3;
                chart3.Series["Марка " + column].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                for (int row = 0; row < Table1.Count; row++)
                {
                    chart3.Series["Марка " + column].Points.AddXY(Table1[row][0], Table1[row][column]);
                }
                checkedListBox1.Items.Add("Марка " + column);
                checkedListBox1.SetItemChecked(column - 1, true);
            }
        }

        private void chart4_Click_1(object sender, EventArgs e)
        {

        }

        private void checkBox10_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox10.Checked == false)
            {
                chart4.Series["График фазовых координат 2"].Points.Clear();
            }
            else
            {
                chart4.Series["График фазовых координат 2"].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                for (int i = 0; i < Tables[1].Count - 1; i++)
                {
                    chart4.Series["График фазовых координат 2"].Points.AddXY(Tables[1][i][1], Tables[1][i][2]);
                    chart4.Series["График фазовых координат 2"].Points[i].Label = i.ToString();
                }
                chart4.Series["График фазовых координат 2"].BorderWidth = 2;
                chart4.Series["График фазовых координат 2"].Color = Color.DodgerBlue;
                chart4.Series["График фазовых координат 2"].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Circle;
                chart4.Series["График фазовых координат 2"].MarkerSize = 10;
            }
        }

        private void checkBox11_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox11.Checked == false)
            {
                chart4.Series["График фазовых координат 3"].Points.Clear();
            }
            else
            {
                chart4.Series["График фазовых координат 3"].ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;
                for (int i = 0; i < Tables[1].Count - 1; i++)
                {
                    chart4.Series["График фазовых координат 3"].Points.AddXY(Tables[2][i][1], Tables[2][i][2]);
                    chart4.Series["График фазовых координат 3"].Points[i].Label = i.ToString();
                }
                chart4.Series["График фазовых координат 3"].BorderWidth = 2;
                chart4.Series["График фазовых координат 3"].Color = Color.DodgerBlue;
                chart4.Series["График фазовых координат 3"].MarkerStyle = System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Circle;
                chart4.Series["График фазовых координат 3"].MarkerSize = 10;
            }
        }
    }
}
